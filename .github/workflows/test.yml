name: Test storage deploy
on: [push]

jobs:
  test:
    name: Test Deployment and Rollback
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get credentials
        uses: leanix/secrets-action@master
        with:
          secret-store-credentials: ${{ secrets.INJECTED_SECRET_STORE_CREDENTIALS }}

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract-branch
      
      - name: Fetch SAS token to access leanixwesteuropetest Azure File Storage
        run: |
          az login --service-principal -u ${{ env.ARM_CLIENT_ID }} -p=${{ env.ARM_CLIENT_SECRET }} --tenant ${{ env.ARM_TENANT_ID }}
          az account set -s ${{ env.ARM_SUBSCRIPTION_ID }}
          expires="$(TZ=UTC date -d '+2 hours' +%Y-%m-%dT%H:%M:%SZ)"
          sasToken="$(az storage account generate-sas --expiry $expires --permissions r --account-name leanixwesteuropetest --resource-types o --services f --https-only -o json | jq --raw-output)"
          echo "SAS_TOKEN=$(echo $sasToken)" >> $GITHUB_ENV
      
      - name: Deploy a microfrontend to all regions
        uses: ./
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          environment: test
          microfrontend: test-microfrontend

      - name: Deploy a microfrontend with region option
        uses: ./
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          environment: test
          region: westeurope
          microfrontend: test-microfrontend
        id: initial-deployment 
      
      - name: Define variables
        run: |
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/index.html" > INDEX_HTML_BLOB
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/main.js" > MAIN_JS_BLOB
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/polyfills.js" > POLYFILLS_JS_BLOB
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/polyfills-es5.js" > POLYFILLS_ES5_JS_BLOB
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/styles.css" > STYLES_CSS_BLOB
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/scripts.js" > SCRIPTS_JS_BLOB
          echo "https://leanixwesteuropetest.blob.core.windows.net/storage-deploy-action-public/logout.html" > LOGOUT_HTML_BLOB
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/index.html?$SAS_TOKEN" > INDEX_HTML_FILE
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/main.js?$SAS_TOKEN" > MAIN_JS_FILE
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/polyfills.js?$SAS_TOKEN" > POLYFILLS_JS_FILE
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/polyfills-es5.js?$SAS_TOKEN" > POLYFILLS_ES5_JS_FILE
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/styles.css?$SAS_TOKEN" > STYLES_CSS_FILE
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/scripts.js?$SAS_TOKEN" > SCRIPTS_JS_FILE
          echo "https://leanixwesteuropetest.file.core.windows.net/k8s-cdn-proxy/storage-deploy-action-public/logout.html?$SAS_TOKEN" > LOGOUT_HTML_FILE
          echo "<h1>Hello index.html</h1>" > EXPECTED_STABLE_INDEX_HTML
          echo "console.log('Hello main.js');" > EXPECTED_STABLE_MAIN_JS
          echo "console.log('Hello polyfills.js');" > EXPECTED_STABLE_POLYFILLS_JS
          echo "console.log('Hello polyfills-es5.js');" > EXPECTED_STABLE_POLYFILLS_ES5_JS
          echo ".helloStyles {}" > EXPECTED_STABLE_STYLES_CSS
          echo "console.log('Hello scripts.js');" > EXPECTED_STABLE_SCRIPTS_JS
          echo "<h1>Hello logout.html</h1>" > EXPECTED_STABLE_LOGOUT_HTML
          echo "<h1>Breaking index.html change</h1>" > EXPECTED_BROKEN_INDEX_HTML
          echo "console.log('Breaking main.js change');" > EXPECTED_BROKEN_MAIN_JS
          echo "console.log('Breaking polyfills.js change');" > EXPECTED_BROKEN_POLYFILLS_JS
          echo "console.log('Breaking polyfills-es5.js change');" > EXPECTED_BROKEN_POLYFILLS_ES5_JS
          echo ".breakingStylesChange {}" > EXPECTED_BROKEN_STYLES_CSS
          echo "console.log('Breaking scripts.js change');" > EXPECTED_BROKEN_SCRIPTS_JS
          echo "<h1>Breaking logout.html change</h1>" > EXPECTED_BROKEN_LOGOUT_HTML

      - name: Deployment to Azure Blob storage has been successful
        shell: bash
        run: |
          receivedIndexHtml=$(curl -s $(cat INDEX_HTML_BLOB))
          receivedMainJs=$(curl -s $(cat MAIN_JS_BLOB))
          receivedPolyfillsJs=$(curl -s $(cat POLYFILLS_JS_BLOB))
          receivedPolyfillsEs5Js=$(curl -s $(cat POLYFILLS_ES5_JS_BLOB))
          receivedStylesCss=$(curl -s $(cat STYLES_CSS_BLOB))
          receivedScriptsJs=$(curl -s $(cat SCRIPTS_JS_BLOB))
          receivedLogoutHtml=$(curl -s $(cat LOGOUT_HTML_BLOB))
          if [[ $receivedIndexHtml != $(cat EXPECTED_STABLE_INDEX_HTML) ||
                $receivedMainJs !=$(cat EXPECTED_STABLE_MAIN_JS) ||
                $receivedPolyfillsJs != $(cat EXPECTED_STABLE_POLYFILLS_JS) ||
                $receivedPolyfillsEs5Js != $(cat EXPECTED_STABLE_POLYFILLS_ES5_JS) ||
                $receivedStylesCss != $(cat EXPECTED_STABLE_STYLES_CSS) ||
                $receivedScriptsJs != $(cat EXPECTED_STABLE_SCRIPTS_JS) ||
                $receivedLogoutHtml != $(cat EXPECTED_STABLE_LOGOUT_HTML)
              ]] ; then
            echo "::error ::Deployment has not been successful"
            exit 1
          fi
      
      - name: Deployment to Azure File Share has been successful
        run: |
          receivedIndexHtml=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat INDEX_HTML_FILE)")
          receivedMainJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat MAIN_JS_FILE)")
          receivedPolyfillsJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat POLYFILLS_JS_FILE)")
          receivedPolyfillsEs5Js=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat POLYFILLS_ES5_JS_FILE)")
          receivedStylesCss=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat STYLES_CSS_FILE)")
          receivedScriptsJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat SCRIPTS_JS_FILE)")
          receivedLogoutHtml=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat LOGOUT_HTML_FILE)")
          if [[ $receivedIndexHtml != $(cat EXPECTED_STABLE_INDEX_HTML) ||
                $receivedMainJs !=$(cat EXPECTED_STABLE_MAIN_JS) ||
                $receivedPolyfillsJs != $(cat EXPECTED_STABLE_POLYFILLS_JS) ||
                $receivedPolyfillsEs5Js != $(cat EXPECTED_STABLE_POLYFILLS_ES5_JS) ||
                $receivedStylesCss != $(cat EXPECTED_STABLE_STYLES_CSS) ||
                $receivedScriptsJs != $(cat EXPECTED_STABLE_SCRIPTS_JS) ||
                $receivedLogoutHtml != $(cat EXPECTED_STABLE_LOGOUT_HTML)
              ]] ; then
            echo "::error ::Deployment has not been successful"
            exit 1
          fi


      - name: Modify the microfrontend by introducing a breaking change
        run: python ./.github/workflows/introduce_breaking_change.py

      - name: Deploy breaking change without versioning 
        uses: ./
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          environment: test
          region: westeurope
          microfrontend: test-microfronted
          version-deployment: false
        id: breaking-change-deployment

      - name: Deployment of breaking change to Azure Blob storage has been successful 
        shell: bash
        run: |
          receivedIndexHtml=$(curl -s $(cat INDEX_HTML_BLOB))
          receivedMainJs=$(curl -s $(cat MAIN_JS_BLOB))
          receivedPolyfillsJs=$(curl -s $(cat POLYFILLS_JS_BLOB))
          receivedPolyfillsEs5Js=$(curl -s $(cat POLYFILLS_ES5_JS_BLOB))
          receivedStylesCss=$(curl -s $(cat STYLES_CSS_BLOB))
          receivedScriptsJs=$(curl -s $(cat SCRIPTS_JS_BLOB))
          receivedLogoutHtml=$(curl -s $(cat LOGOUT_HTML_BLOB))
          if [[ $receivedIndexHtml != $(cat EXPECTED_BROKEN_INDEX_HTML) ||
                $receivedMainJs !=$(cat EXPECTED_BROKEN_MAIN_JS) ||
                $receivedPolyfillsJs != $(cat EXPECTED_BROKEN_POLYFILLS_JS) ||
                $receivedPolyfillsEs5Js != $(cat EXPECTED_BROKEN_POLYFILLS_ES5_JS) ||
                $receivedStylesCss != $(cat EXPECTED_BROKEN_STYLES_CSS) ||
                $receivedScriptsJs != $(cat EXPECTED_BROKEN_SCRIPTS_JS) ||
                $receivedLogoutHtml != $(cat EXPECTED_BROKEN_LOGOUT_HTML)
              ]] ; then
            echo "::error ::Deployment has not been successful"
            exit 1
          fi
      
      - name: Deployment of breaking change to Azure File Share has been successful
        run: |
          receivedIndexHtml=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat INDEX_HTML_FILE)")
          receivedMainJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat MAIN_JS_FILE)")
          receivedPolyfillsJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat POLYFILLS_JS_FILE)")
          receivedPolyfillsEs5Js=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat POLYFILLS_ES5_JS_FILE)")
          receivedStylesCss=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat STYLES_CSS_FILE)")
          receivedScriptsJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat SCRIPTS_JS_FILE)")
          receivedLogoutHtml=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat LOGOUT_HTML_FILE)")
          if [[ $receivedIndexHtml != $(cat EXPECTED_BROKEN_INDEX_HTML) ||
                $receivedMainJs !=$(cat EXPECTED_BROKEN_MAIN_JS) ||
                $receivedPolyfillsJs != $(cat EXPECTED_BROKEN_POLYFILLS_JS) ||
                $receivedPolyfillsEs5Js != $(cat EXPECTED_BROKEN_POLYFILLS_ES5_JS) ||
                $receivedStylesCss != $(cat EXPECTED_BROKEN_STYLES_CSS) ||
                $receivedScriptsJs != $(cat EXPECTED_BROKEN_SCRIPTS_JS) ||
                $receivedLogoutHtml != $(cat EXPECTED_BROKEN_LOGOUT_HTML)
              ]] ; then
            echo "::error ::Deployment has not been successful"
            exit 1
          fi

      - name: Rollback the breaking change deployment to the initial deployed version
        uses: ./
        with:
          container: storage-deploy-action-public
          source-directory: test
          environment: test
          region: westeurope
          rollback-mode: true
          rollback-version: ${{ steps.initial-deployment.outputs.version }}

      - name: Rollback on Azure Blob storage has been successful
        shell: bash
        run: |
          receivedIndexHtml=$(curl -s $(cat INDEX_HTML_BLOB))
          receivedMainJs=$(curl -s $(cat MAIN_JS_BLOB))
          receivedPolyfillsJs=$(curl -s $(cat POLYFILLS_JS_BLOB))
          receivedPolyfillsEs5Js=$(curl -s $(cat POLYFILLS_ES5_JS_BLOB))
          receivedStylesCss=$(curl -s $(cat STYLES_CSS_BLOB))
          receivedScriptsJs=$(curl -s $(cat SCRIPTS_JS_BLOB))
          receivedLogoutHtml=$(curl -s $(cat LOGOUT_HTML_BLOB))
          if [[ $receivedIndexHtml != $(cat EXPECTED_STABLE_INDEX_HTML) ||
                $receivedMainJs !=$(cat EXPECTED_STABLE_MAIN_JS) ||
                $receivedPolyfillsJs != $(cat EXPECTED_STABLE_POLYFILLS_JS) ||
                $receivedPolyfillsEs5Js != $(cat EXPECTED_STABLE_POLYFILLS_ES5_JS) ||
                $receivedStylesCss != $(cat EXPECTED_STABLE_STYLES_CSS) ||
                $receivedScriptsJs != $(cat EXPECTED_STABLE_SCRIPTS_JS) ||
                $receivedLogoutHtml != $(cat EXPECTED_STABLE_LOGOUT_HTML)
              ]] ; then
            echo "::error ::Deployment has not been successful"
            exit 1
          fi

      - name: Rollback of breaking change to Azure File Share has been successful
        run: |
          receivedIndexHtml=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat INDEX_HTML_FILE)")
          receivedMainJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat MAIN_JS_FILE)")
          receivedPolyfillsJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat POLYFILLS_JS_FILE)")
          receivedPolyfillsEs5Js=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat POLYFILLS_ES5_JS_FILE)")
          receivedStylesCss=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat STYLES_CSS_FILE)")
          receivedScriptsJs=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat SCRIPTS_JS_FILE)")
          receivedLogoutHtml=$(curl -X GET -H "x-ms-date: $(date -u)" "$(cat LOGOUT_HTML_FILE)")
          if [[ $receivedIndexHtml != $(cat EXPECTED_STABLE_INDEX_HTML) ||
                $receivedMainJs !=$(cat EXPECTED_STABLE_MAIN_JS) ||
                $receivedPolyfillsJs != $(cat EXPECTED_STABLE_POLYFILLS_JS) ||
                $receivedPolyfillsEs5Js != $(cat EXPECTED_STABLE_POLYFILLS_ES5_JS) ||
                $receivedStylesCss != $(cat EXPECTED_STABLE_STYLES_CSS) ||
                $receivedScriptsJs != $(cat EXPECTED_STABLE_SCRIPTS_JS) ||
                $receivedLogoutHtml != $(cat EXPECTED_STABLE_LOGOUT_HTML)
              ]] ; then
            echo "::error ::Deployment has not been successful"
            exit 1
          fi 

      - name: Rollback fails, if no rollback-version specified
        uses: ./
        continue-on-error: true
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          environment: test
          rollback-mode: true
      
      - name: Fails because of unsupported region
        uses: ./
        continue-on-error: true
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          environment: test
          region: northeurope
      
      - name: Fails because of forbidden container name
        uses: ./
        continue-on-error: true
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: foobar

      - name: Fails because of non-existing container name
        uses: ./
        continue-on-error: true
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-unknown

      - name: Fails because of invalid region
        uses: ./
        continue-on-error: true
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          region: foobar

      - name: Fails because of invalid environment
        uses: ./
        continue-on-error: true
        with:
          branch: ${{ steps.extract-branch.outputs.branch }}
          source-directory: test
          container: storage-deploy-action-public
          environment: foobar

      - name: Fails because no branch provided
        uses: ./
        continue-on-error: true
        with:
          source-directory: test
          container: storage-deploy-action-public
